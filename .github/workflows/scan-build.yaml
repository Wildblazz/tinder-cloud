name: Scan and Build Services

on:
  pull_request:
    paths:
      - 'be-components/**'

jobs:
  detect-changed-services:
    runs-on: [self-hosted, arm64]
    outputs:
      changed_services: ${{ steps.process-services.outputs.services }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get changed services
        id: changed-services
        uses: tj-actions/changed-files@v45
        with:
          files: be-components/**
          dir_names: true
          dir_names_max_depth: 2

      - name: Process changed services
        id: process-services
        run: |
          changed_dirs="${{ steps.changed-services.outputs.all_changed_files }}"
          services=""

          for dir in $changed_dirs; do
            service_name=$(basename "$dir")
            if [ "$service_name" != "be-components" ] && [ "$service_name" != "gradle" ] && [ -d "be-components/$service_name" ] && [ -f "be-components/$service_name/build.gradle.kts" ]; then
              services="$services $service_name"
            fi
          done

          services=$(echo "$services" | tr ' ' '\n' | sort -u | tr '\n' ' ' | xargs)
          echo "services=$services" >> $GITHUB_OUTPUT
          echo "Changed services: $services"

  trivy-scan:
    runs-on: [self-hosted, arm64]
    needs: detect-changed-services
    if: needs.detect-changed-services.outputs.changed_services != ''
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scan
        working-directory: be-components
        run: |
          services="${{ needs.detect-changed-services.outputs.changed_services }}"
          echo "Scanning changed services: $services"

          exit_code=0
          pr_comment=""

          # Create consolidated output directory
          mkdir -p trivy-results/sarif

          for service in $services; do
            echo "::group::Scanning service: $service"

            # Run Trivy with SARIF output for GitHub Security tab
            trivy fs --format sarif --output trivy-results/sarif/$service.sarif ./$service/

            # Run Trivy with table format for PR comment
            trivy fs --format table --severity HIGH,CRITICAL --ignore-unfixed ./$service/ > trivy-results/$service-table.txt 2>&1 || true

            # Run Trivy with exit code check
            if ! trivy fs --format table --severity HIGH,CRITICAL --ignore-unfixed ./$service/ > /dev/null 2>&1; then
              echo "❌ HIGH/CRITICAL vulnerabilities found in $service"
              exit_code=1

              # Add to PR comment
              pr_comment="$pr_comment\n\n### 🚨 Vulnerabilities found in \`$service\`\n\n"
              pr_comment="$pr_comment\`\`\`\n$(cat trivy-results/$service-table.txt)\n\`\`\`"
            else
              echo "✅ No HIGH/CRITICAL vulnerabilities found in $service"
              pr_comment="$pr_comment\n\n### ✅ No HIGH/CRITICAL vulnerabilities found in \`$service\`"
            fi

            echo "::endgroup::"
          done

          # Save PR comment content
          echo -e "$pr_comment" > trivy-results/pr-comment.md

          # List generated SARIF files for debugging
          echo "Generated SARIF files:"
          ls -la trivy-results/sarif/ || echo "No SARIF files found"

          if [ $exit_code -ne 0 ]; then
            echo "::error::HIGH/CRITICAL vulnerabilities detected in one or more services"
            exit 1
          fi

      - name: Upload Trivy SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: be-components/trivy-results/sarif/
          category: trivy
        continue-on-error: true

  codeql-scan:
    runs-on: [self-hosted, x64]
    needs: detect-changed-services
    if: needs.detect-changed-services.outputs.changed_services != ''
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21

      - name: Make gradlew executable
        run: chmod +x be-components/gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-arm64-${{ runner.os }}-${{ hashFiles('**/build.gradle.kts', '**/gradle-wrapper.properties') }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java-kotlin
          queries: security-extended,security-and-quality

      - name: Build for CodeQL
        working-directory: be-components
        run: |
          services="${{ needs.detect-changed-services.outputs.changed_services }}"
          build_tasks=""
          for service in $services; do
            build_tasks="$build_tasks :$service:build"
          done
          ./gradlew $build_tasks -x test --parallel --build-cache

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  test-and-build:
    runs-on: [self-hosted, arm64]
    needs: [detect-changed-services, trivy-scan, codeql-scan]
    if: always() && needs.detect-changed-services.outputs.changed_services != ''
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21

      - name: Make gradlew executable
        run: chmod +x be-components/gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-arm64-${{ runner.os }}-${{ hashFiles('**/build.gradle.kts', '**/gradle-wrapper.properties') }}

      - name: Run tests and build
        working-directory: be-components
        run: |
          services="${{ needs.detect-changed-services.outputs.changed_services }}"
          for service in $services; do
            echo "Testing and building service: $service"
            ./gradlew :$service:test :$service:build --parallel --build-cache
          done

  cleanup:
    runs-on: [self-hosted, arm64]
    needs: [trivy-scan, codeql-scan, test-and-build]
    if: always()
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Make gradlew executable
        run: chmod +x be-components/gradlew

      - name: Cleanup Gradle
        working-directory: be-components
        run: |
          ./gradlew clean --stop || true
        continue-on-error: true
